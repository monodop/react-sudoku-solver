{"version":3,"sources":["serviceWorker.ts","findClusters.ts","state/board.ts","state/root.ts","components/SolveCell.tsx","components/EnterValueCell.tsx","components/Board.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","removeRange","arr","toRemove","filter","item","includes","applyClusters","data","clusters","result","map","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","cluster","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","indices","Symbol","iterator","next","done","i","v","matches","err","return","_iterator","findClusters","allIndices","_ref","_ref2","Object","slicedToArray","length","_ref3","_ref4","allValues","reduce","prev","current","concat","toConsumableArray","elem","pos","indexOf","d","matchingSetIndices","j","push","leftCluster","subClusters","rightCluster","BoardStatus","CELL_FIXED","CELL_FLOATING","SET_CELL","REMOVE_POSSIBLE_VALUES","generateEmptyBoard","initialValues","arguments","constraints","filledInitialValues","Array","fill","_","y","x","status","EnterValues","cells","type","possibleValues","columnNames","0","1","2","rowNames","generateDefaultConstraints","name","_loop2","ax","ay","cellCoords","cx","cy","initialBoardState","getNextAction","boardState","nextActionSet","actions","causes","messages","cell","constraint","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_loop3","x2","_ref5","y2","cell2","values","some","_ref6","_ref7","cause","find","_ref8","_ref9","_iterator4","_loop4","indexToCoords","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_ref12","_ref11","clusterList","indexToValue","valueToIndex","inverseData","flipCluster","index","findBothClusterSets","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","clusterMessages","useClusterMessages","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","sort","join","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","extraValues","_ret","rootReducer","combineReducers","board","action","produce","draft","Solve","willHighlight","n","cvalues","SolveCell","props","isInitialValue","react","className","isPossible","willSelect","willRemove","key","Error","EnterValueCell","dispatch","useDispatch","onClick","setCell","clearCell","getBoardState","appState","Board","state","useMappedState","resetBoardStateOnClick","row","SolveCell_SolveCell","message","EnterValueCell_EnterValueCell","store","createStore","ReactDOM","render","react_default","a","createElement","index_es","Provider","Board_Board","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2FCPC,SAASC,EAAeC,EAAUC,GACrC,OAAOD,EAAIE,OAAO,SAAAC,GAAI,OAAKF,EAASG,SAASD,KAG1C,SAASE,EAAcC,EAAkBC,GAC5C,IAAIC,EAAqBF,EAAKG,IAAI,iBAAM,KADqCC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAE7E,IAF6E,IAE7EC,EAF6EC,EAAA,eAEpEC,EAFoEF,EAAAG,MAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAP,EAAA,IAGzE,QAAAQ,EAAAC,EAAcN,EAAQO,QAAtBC,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EAA+B,KAAtBU,EAAsBP,EAAAJ,MAC3BT,EAAOoB,GAAKtB,EAAKsB,GAAG1B,OAAO,SAAA2B,GAAC,OAAIb,EAAQc,QAAQ1B,SAASyB,MAJY,MAAAE,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAI,EAAAU,QAAAV,EAAAU,SAAA,WAAAb,EAAA,MAAAC,KAE7Ea,EAAoB1B,EAApBiB,OAAAC,cAAAf,GAAAI,EAAAmB,EAAAP,QAAAC,MAAAjB,GAAA,EAA8BK,IAF+C,MAAAgB,GAAApB,GAAA,EAAAC,EAAAmB,EAAA,YAAArB,GAAA,MAAAuB,EAAAD,QAAAC,EAAAD,SAAA,WAAArB,EAAA,MAAAC,GAO7E,OAAOJ,EAkCJ,SAAS0B,EAAa5B,GAQzB,IALA,IAAI6B,EAAa7B,EAAKG,IAAwB,SAACoB,EAAGD,GAAJ,MAAU,CAACC,EAAGD,KACvD1B,OAAO,SAAAkC,GAAA,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAAEP,EAAFQ,EAAA,GAAAA,EAAA,UAAYR,EAAEW,OAAS,IAC9B/B,IAAI,SAAAgC,GAAA,IAAAC,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAAAC,EAAA,UAAAA,EAAA,KACLC,EAAqBrC,EAAKsC,OAAO,SAACC,EAAMC,GAAP,SAAAC,OAAAT,OAAAU,EAAA,EAAAV,CAAuBO,GAAvBP,OAAAU,EAAA,EAAAV,CAAgCQ,KAAU,IAtDlE5C,OAAO,SAAC+C,EAAMC,EAAKlD,GAAZ,OAAoBA,EAAImD,QAAQF,KAAUC,IAwDrDtB,EAAI,EAAGA,EAAItB,EAAKkC,OAAQZ,IAAK,CAElC,IAAIwB,EAAI9C,EAAKsB,GACb,GAAiB,IAAbwB,EAAEZ,QAAgBY,EAAEZ,SAAWG,EAAUH,OAA7C,CAIA,IADA,IAAIa,EAA+B,GAC1BC,EAAI,EAAGA,EAAIhD,EAAKkC,OAAQc,IAAK,CAElC,GAAKnB,EAAW/B,SAASkD,GAIE,IADTvD,EAAYO,EAAKgD,GAAIF,GACvBZ,QACZa,EAAmBE,KAAKD,GAKhC,GAAIF,EAAEZ,SAAWa,EAAmBb,OAAQ,CACxC,IAAIgB,EAAuB,CACvBjC,QAAS8B,EACTvB,QAASsB,EACTK,YAAa,IAEbC,EAAwB,CACxBnC,QAASxB,EAAYoC,EAAYkB,GACjCvB,QAAS/B,EAAY4C,EAAWS,GAChCK,YAAa,IAQjB,OALID,EAAYjC,QAAQiB,OAAS,IAC7BgB,EAAYC,YAAcvB,EAAa7B,EAAcC,EAAM,CAACkD,MAC5DE,EAAanC,QAAQiB,OAAS,IAC9BkB,EAAaD,YAAcvB,EAAa7B,EAAcC,EAAM,CAACoD,MAE1D,CACHF,EACAE,KAMZ,MAAO,GCxGJ,IAsBKC,EAtBCC,EAAa,aAMbC,EAAgB,0BAgBjBF,qEAYL,IAAMG,EAAW,WAeXC,EAAyB,yBA+DzBC,EAAqB,WAAgF,IAA/EC,EAA+EC,UAAA1B,OAAA,QAAA3B,IAAAqD,UAAA,GAAAA,UAAA,GAAnD,GAAIC,EAA+CD,UAAA1B,OAAA,QAAA3B,IAAAqD,UAAA,GAAAA,UAAA,GAAnB,GAEvFE,EAAkCC,MAAM,GAAGC,KAAK,GAAG7D,IACnD,SAAC8D,EAAGC,GAAJ,OAAUH,MAAM,GAAGC,KAAK,GAAG7D,IACvB,SAAC8D,EAAGE,GACA,OAAIR,EAAczB,OAASgC,GAAKP,EAAcO,GAAGhC,OAASiC,EAC/CR,EAAcO,GAAGC,GAErB,MAKnB,MAAO,CACHC,OAAQf,EAAYgB,YACpBV,cAAeG,EACfQ,MAAOP,MAAM,GAAGC,KAAK,GAAG7D,IACpB,SAAC8D,EAAGC,GAAJ,OAAUH,MAAM,GAAGC,KAAK,GAAG7D,IACvB,SAAC8D,EAAGE,GAEA,OAAkC,IAA9BL,EAAoBI,GAAGC,GAChB,CACHI,KAAMjB,EACNa,IACAD,IACAvD,MAAOmD,EAAoBI,GAAGC,IAI/B,CACHI,KAAMhB,EACNY,IACAD,IACAM,eAAgB,IAAIT,MAAM,GAAGC,KAAK,GAAG7D,IAAI,SAAC8D,EAAG3C,GAAJ,OAAUA,EAAI,SAKvEuC,gBAIFY,EAAwC,CAC1CC,EAAG,OACHC,EAAG,SACHC,EAAG,SAEDC,EAAqC,CACvCH,EAAG,MACHC,EAAG,SACHC,EAAG,UAGME,EAA6B,WAEtC,IADA,IAAIjB,EAA4B,GAD0BpD,EAAA,SAEjD0D,GACLN,EAAYZ,KAAK,CACbqB,MAAOP,MAAM,GAAGC,KAAK,GAAG7D,IAAI,SAAC8D,EAAGC,GAAJ,MAAU,CAACC,EAAGD,KAC1Ca,KAAI,UAAAtC,OAAY0B,EAAE,MAHjBA,EAAI,EAAGA,EAAI,EAAGA,IAAK1D,EAAnB0D,GAMT,IAR0D,IAAAa,EAAA,SAQjDd,GACLL,EAAYZ,KAAK,CACbqB,MAAOP,MAAM,GAAGC,KAAK,GAAG7D,IAAI,SAAC8D,EAAGE,GAAJ,MAAU,CAACA,EAAGD,KAC1Ca,KAAI,OAAAtC,OAASyB,EAAE,MAHdA,EAAI,EAAGA,EAAI,EAAGA,IAAKc,EAAnBd,GAMT,IAAK,IAAIe,EAAK,EAAGA,EAAK,EAAGA,IACrB,IAAK,IAAIC,EAAK,EAAGA,EAAK,EAAGA,IAAM,CAE3B,IADA,IAAIC,EAAiC,GAC5BC,EAAK,EAAGA,EAAK,EAAGA,IACrB,IAAK,IAAIC,EAAK,EAAGA,EAAK,EAAGA,IACrBF,EAAWlC,KAAK,CAAM,EAALgC,EAASG,EAAS,EAALF,EAASG,IAG/CxB,EAAYZ,KAAK,CACbqB,MAAOa,EACPJ,KAAM,QAAkB,IAAPE,GAAmB,IAAPC,EAAY,UAAzB,GAAAzC,OAAwCoC,EAASK,GAAjD,KAAAzC,OAAwDgC,EAAYQ,KAAS,YAIzG,OAAOpB,GAILyB,EAAgC5B,EAuBlC,CACI,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1B,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1B,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1B,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1B,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1B,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1B,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1B,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1B,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE9BoB,KA8EG,SAASS,EAAcC,GAQ1B,IANA,IAAIC,EAA+B,CAC/BC,QAAS,GACTC,OAAQ,GACRC,SAAU,IAGLzB,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAI2B,EAAOL,EAAWlB,MAAMJ,GAAGC,GAC3B0B,EAAKtB,OAAShB,GAAgD,IAA/BsC,EAAKrB,eAAetC,QACnDuD,EAAcC,QAAQzC,KAAK,CACvBsB,KAAMf,EACNW,IACAD,IACAvD,MAAOkF,EAAKrB,eAAe,KAK3C,GAAIiB,EAAcC,QAAQxD,OAAS,EAE/B,OADAuD,EAAcG,SAAS3C,KAAK,+CACrBwC,EAvBsD,IAAArF,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IA0BjE,QAAAC,EAAAmB,EAAuB6D,EAAW3B,YAAlC3C,OAAAC,cAAAf,GAAAI,EAAAmB,EAAAP,QAAAC,MAAAjB,GAAA,EAA+C,KAAtC0F,EAAsCtF,EAAAG,MAAAoF,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAE3C,QAAA2F,EAAAC,EAAmBL,EAAWxB,MAA9BpD,OAAAC,cAAA4E,GAAAG,EAAAC,EAAA/E,QAAAC,MAAA0E,GAAA,EAAqC,KAAA5D,EAAA+D,EAAAvF,MAAAoB,EAAAC,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAA3BgC,EAA2BpC,EAAA,GAAxBmC,EAAwBnC,EAAA,GAC7B8D,EAAOL,EAAWlB,MAAMJ,GAAGC,GAC/B,GAAI0B,EAAKtB,OAASjB,EAAlB,CAFiC,IAAA8C,GAAA,EAAAC,GAAA,EAAAC,OAAA/F,EAAA,IAKjC,IALiC,IAKjCgG,EALiCC,EAAA,eAAApE,EAAAmE,EAAA5F,MAKvB8F,GALuBC,EAAA1E,OAAAC,EAAA,EAAAD,CAAAI,EAAA,OAKnBuE,EALmBD,EAAA,GAMzBE,EAAQpB,EAAWlB,MAAMqC,GAAIF,GACjC,GAAIG,EAAMrC,OAASjB,GAAcuC,EAAKrB,eAAe1E,SAAS8G,EAAMjG,OAAQ,CACxE8E,EAAcC,QAAQzC,KAAK,CACvBsB,KAAMd,EACNU,IACAD,IACA2C,OAAQ,CAACD,EAAMjG,SAEd8E,EAAcE,OAAOmB,KAAK,SAAAC,GAAA,IAAAC,EAAAhF,OAAAC,EAAA,EAAAD,CAAA+E,EAAA,GAAE3B,EAAF4B,EAAA,GAAM3B,EAAN2B,EAAA,UAAc5B,IAAOqB,GAAMpB,IAAOsB,KAC7DlB,EAAcE,OAAO1C,KAAK,CAACwD,EAAIE,EAAI,KAEvC,IAAIM,EAAQxB,EAAcE,OAAOuB,KAAK,SAAAC,GAAA,IAAAC,EAAApF,OAAAC,EAAA,EAAAD,CAAAmF,EAAA,GAAE/B,EAAFgC,EAAA,GAAM/B,EAAN+B,EAAA,UAAchC,IAAOqB,GAAMpB,IAAOsB,IACpEM,GACAA,EAAM,GAAGhE,KAAK2D,EAAMjG,SAdhC0G,EAAqBvB,EAAWxB,MAAhCpD,OAAAC,cAAAiF,GAAAG,EAAAc,EAAAjG,QAAAC,MAAA+E,GAAA,EAAuC,KAAAM,EAAAF,KALN,MAAA/E,GAAA4E,GAAA,EAAAC,EAAA7E,EAAA,YAAA2E,GAAA,MAAAiB,EAAA3F,QAAA2F,EAAA3F,SAAA,WAAA2E,EAAA,MAAAC,MAFM,MAAA7E,GAAAuE,GAAA,EAAAC,EAAAxE,EAAA,YAAAsE,GAAA,MAAAI,EAAAzE,QAAAyE,EAAAzE,SAAA,WAAAsE,EAAA,MAAAC,KA1BkB,MAAAxE,GAAApB,GAAA,EAAAC,EAAAmB,EAAA,YAAArB,GAAA,MAAAuB,EAAAD,QAAAC,EAAAD,SAAA,WAAArB,EAAA,MAAAC,GAqDjE,GAAImF,EAAcC,QAAQxD,OAAS,EAE/B,OADAuD,EAAcG,SAAS3C,KAAK,sDACrBwC,EAGX,IAAIG,EAAqB,GA1DwChF,GAAA,EAAAC,GAAA,EAAAC,OAAAP,EAAA,IA2DjE,IA3DiE,IA2DjEQ,EA3DiEuG,EAAA,eA2DxDxB,EA3DwD/E,EAAAJ,MA6DzD4G,EAAoC,GACpCvH,EAAmB,GA9DsCwH,GAAA,EAAAC,GAAA,EAAAC,OAAAnH,EAAA,IAgE7D,QAAAoH,EAAAC,EAAmB9B,EAAWxB,MAA9BpD,OAAAC,cAAAqG,GAAAG,EAAAC,EAAAxG,QAAAC,MAAAmG,GAAA,EAAqC,KAAAK,EAAAF,EAAAhH,MAAAmH,EAAA9F,OAAAC,EAAA,EAAAD,CAAA6F,EAAA,GAA3B1D,EAA2B2D,EAAA,GAAxB5D,EAAwB4D,EAAA,GAC7BjC,EAAOL,EAAWlB,MAAMJ,GAAGC,GAC3B0B,EAAKtB,OAASjB,IAGlBiE,EAActE,KAAK,CAACkB,EAAGD,IACvBlE,EAAKiD,KAAK4C,EAAKrB,kBAtE0C,MAAA/C,GAAAgG,GAAA,EAAAC,EAAAjG,EAAA,YAAA+F,GAAA,MAAAI,EAAAlG,QAAAkG,EAAAlG,SAAA,WAAA+F,EAAA,MAAAC,GAyE7D,IAAIK,EDzWL,SAA6B/H,GAKhC,IAHA,IAAIgI,EAAyB,GACzBC,EAA0C,GAC1CC,EAA0B,GACrB5G,EAAI,EAAGA,EAAItB,EAAKkC,OAAQZ,IAAK,CAClC,IAAIwB,EAAI9C,EAAKsB,GADqByE,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAElC,QAAA2F,EAAAC,EAAcrD,EAAd5B,OAAAC,cAAA4E,GAAAG,EAAAC,EAAA/E,QAAAC,MAAA0E,GAAA,EAAiB,KAARxE,EAAQ2E,EAAAvF,MAEPY,KAAK0G,IACPA,EAAa1G,GAAKyG,EAAa9F,OAC/B8F,EAAa/E,KAAK1B,GAClB2G,EAAYjF,KAAK,KAGrBiF,EADYD,EAAa1G,IACN0B,KAAK3B,IAVM,MAAAG,GAAAuE,GAAA,EAAAC,EAAAxE,EAAA,YAAAsE,GAAA,MAAAI,EAAAzE,QAAAyE,EAAAzE,SAAA,WAAAsE,EAAA,MAAAC,IAuBtC,MAAO,CAHcrE,EAAa5B,GACZ4B,EAAasG,GAAa/H,IAP5B,SAAdgI,EAAezH,GAAD,MAAgC,CAChDO,QAASP,EAAQc,QACjBA,QAASd,EAAQO,QAAQd,IAAI,SAAAiI,GAAK,OAAIJ,EAAaI,KACnDjF,YAAazC,EAAQyC,YAAYhD,IAAIgI,OCmVnBE,CAAoBrI,GAzEuBsI,GAAA,EAAAC,GAAA,EAAAC,OAAAjI,EAAA,IA0E7D,QAAAkI,EAAAC,EAAqBX,EAArB7G,OAAAC,cAAAmH,GAAAG,EAAAC,EAAAtH,QAAAC,MAAAiH,GAAA,EAAkC,KAAzBrI,EAAyBwI,EAAA9H,MAE1BgI,EAAkB,GAClBC,GAAqB,EAHKC,GAAA,EAAAC,GAAA,EAAAC,OAAAxI,EAAA,IAI9B,QAAAyI,EAAAC,EAAoBhJ,EAApBiB,OAAAC,cAAA0H,GAAAG,EAAAC,EAAA7H,QAAAC,MAAAwH,GAAA,EAA8B,KAArBnI,EAAqBsI,EAAArI,MAC1BgI,EAAgB1F,KAAK,UAAAR,OAAUT,OAAAU,EAAA,EAAAV,CAAKtB,EAAQc,SAAS0H,OAAOC,KAAK,MAA5C,qBAAA1G,OACd/B,EAAQO,QAAQd,IAAI,SAAAmB,GAAC,UAAAmB,OAAQ8E,EAAcjG,GAAG,GAAzB,KAAAmB,OAA+B8E,EAAcjG,GAAG,GAAhD,OAAuD6H,KAAK,QAF9D,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAA/I,EAAA,IAG1B,QAAAgJ,EAAAC,EAAc9I,EAAQO,QAAtBC,OAAAC,cAAAiI,GAAAG,EAAAC,EAAApI,QAAAC,MAAA+H,GAAA,EAA+B,KAAtB9H,EAAsBiI,EAAA5I,MACvB8I,EAAchK,EAAYO,EAAKsB,GAAIZ,EAAQc,SAC3CiI,EAAYvH,OAAS,IACrB0G,GAAqB,EACrBnD,EAAcC,QAAQzC,KAAK,CACvBsB,KAAMd,EACNU,EAAGoD,EAAcjG,GAAG,GACpB4C,EAAGqD,EAAcjG,GAAG,GACpBuF,OAAQ4C,MAXM,MAAAhI,GAAA4H,GAAA,EAAAC,EAAA7H,EAAA,YAAA2H,GAAA,MAAAI,EAAA9H,QAAA8H,EAAA9H,SAAA,WAAA2H,EAAA,MAAAC,KAJA,MAAA7H,GAAAqH,GAAA,EAAAC,EAAAtH,EAAA,YAAAoH,GAAA,MAAAI,EAAAvH,QAAAuH,EAAAvH,SAAA,WAAAoH,EAAA,MAAAC,GAqB9B,GAAIH,EAAoB,CACpBD,EAAgBA,EAAgBzG,OAAS,GAAK,OAASyG,EAAgBA,EAAgBzG,OAAS,GAChG0D,EAAS3C,KAAT,gBAAAR,OAA8BkG,EAAgBzG,OAA9C,yBAAAO,OAA4EkG,EAAgBQ,KAAK,QACjG,QAlGqD,MAAA1H,GAAA8G,GAAA,EAAAC,EAAA/G,EAAA,YAAA6G,GAAA,MAAAI,EAAAhH,QAAAgH,EAAAhH,SAAA,WAAA6G,EAAA,MAAAC,GAsG7D,GAAI/C,EAAcC,QAAQxD,OAAS,EAM/B,OALAuD,EAAcG,SAAd,aAAAnD,OACgBqD,EAAWf,KAD3B,MAAAtC,OAEOmD,EAFP,CAGI,sFAEJ,CAAArE,EAAOkE,IAjDfzE,EAAuBwE,EAAW3B,YAAlC3C,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EAA+C,KAAA8I,EAAApC,IAAA,qBAAAoC,EAAA,OAAAA,EAAAnI,GA3DkB,MAAAE,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAI,EAAAU,QAAAV,EAAAU,SAAA,WAAAb,EAAA,MAAAC,GAiHjE,OADA2E,EAAcG,SAAS3C,KAAK,0BACrBwC,ECvaJ,IAAMkE,EAAcC,YAAgB,CACvCC,MDyOwB,eAACrE,EAAD5B,UAAA1B,OAAA,QAAA3B,IAAAqD,UAAA,GAAAA,UAAA,GAA0B0B,EAAmBwE,EAA7ClG,UAAA1B,OAAA,EAAA0B,UAAA,QAAArD,EAAA,OACxBwJ,YAAQvE,EAAY,SAAAwE,GAehB,GAbIF,EAAOvF,OAASf,IAChBwG,EAAM1F,MAAMwF,EAAO5F,GAAG4F,EAAO3F,GAAK,CAC9BI,KAAMjB,EACNa,EAAG2F,EAAO3F,EACVD,EAAG4F,EAAO5F,EACVvD,MAAOmJ,EAAOnJ,OAGdqJ,EAAM5F,SAAWf,EAAYgB,cAC7B2F,EAAMrG,cAAcmG,EAAO5F,GAAG4F,EAAO3F,GAAK2F,EAAOnJ,QAIrDmJ,EAAOvF,OAASd,EAAwB,CACxC,IAAIoC,EAAOmE,EAAM1F,MAAMwF,EAAO5F,GAAG4F,EAAO3F,GACpC0B,EAAKtB,OAAShB,IACdsC,EAAKrB,eAAiBqB,EAAKrB,eAAe5E,OAAO,SAAA2B,GAAC,OAAKuI,EAAOjD,OAAO/G,SAASyB,MAqBtF,GAvOkB,eAsNduI,EAAOvF,OACPyF,EAAM1F,MAAMwF,EAAO5F,GAAG4F,EAAO3F,GAAK,CAC9BI,KAAMhB,EACNY,EAAG2F,EAAO3F,EACVD,EAAG4F,EAAO5F,EACVM,eAAgBT,MAAM,GAAGC,KAAK,GAAG7D,IAAI,SAAC8D,EAAG3C,GAAJ,OAAUA,EAAE,KAGjD0I,EAAM5F,SAAWf,EAAYgB,cAC7B2F,EAAMrG,cAAcmG,EAAO5F,GAAG4F,EAAO3F,GAAK,IAhN7B,kBAoNjB2F,EAAOvF,OACPyF,EAAM5F,OAASf,EAAY4G,OAhNT,mBAmNlBH,EAAOvF,KAAyB,CAChCyF,EAAM5F,OAASf,EAAYgB,YAC3B,IAAK,IAAIF,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAGA,IACe,IAA9B8F,EAAMrG,cAAcO,GAAGC,GACvB6F,EAAM1F,MAAMJ,GAAGC,GAAK,CAChBI,KAAMjB,EACNa,IACAD,IACAvD,MAAOqJ,EAAMrG,cAAcO,GAAGC,IAIlC6F,EAAM1F,MAAMJ,GAAGC,GAAK,CAChBI,KAAMhB,EACNY,IACAD,IACAM,eAAgBT,MAAM,GAAGC,KAAK,GAAG7D,IAAI,SAAC8D,EAAG3C,GAAJ,OAAUA,EAAE,KAOrE,GAtOyB,sBAsOrBwI,EAAOvF,KACP,OAAOb,EAAmB,GAAIoB,iBElRpCoF,EAAgB,SAAC/F,EAAWD,EAAWiG,EAAW1E,GAAiC,IAAAM,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IACrF,QAAA2F,EAAAC,EAA8BV,EAAcE,OAA5CzE,OAAAC,cAAA4E,GAAAG,EAAAC,EAAA/E,QAAAC,MAAA0E,GAAA,EAAoD,KAAA5D,EAAA+D,EAAAvF,MAAAoB,EAAAC,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAA1CiD,EAA0CrD,EAAA,GAAtCsD,EAAsCtD,EAAA,GAAlCqI,EAAkCrI,EAAA,GAChD,GAAIqD,IAAOjB,GAAKkB,IAAOnB,GAAKkG,EAAQtK,SAASqK,GACzC,OAAO,GAHsE,MAAA1I,GAAAuE,GAAA,EAAAC,EAAAxE,EAAA,YAAAsE,GAAA,MAAAI,EAAAzE,QAAAyE,EAAAzE,SAAA,WAAAsE,EAAA,MAAAC,GAKrF,OAAO,GAGEoE,EAAY,SAACC,GAA0B,IAExCzE,EAAwCyE,EAAxCzE,KAAMJ,EAAkC6E,EAAlC7E,cAAe8E,EAAmBD,EAAnBC,eACrBpG,EAAS0B,EAAT1B,EAAGD,EAAM2B,EAAN3B,EAEX,GAAI2B,EAAKtB,OAAShB,EACd,OACIiH,EAAA,qBAAKC,UAAU,sBACV1G,MAAM,GAAGC,KAAK,GAAG7D,IAAI,SAAC8D,EAAG3C,GACtB,IAAI6I,EAAI7I,EAAI,EACRoJ,EAAa7E,EAAKrB,eAAe1E,SAASqK,GAC1CM,EAAY,kBAShB,OA1CD,SAACtG,EAAWD,EAAWiG,EAAW1E,GAAiC,IAAArF,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAClF,QAAAC,EAAAmB,EAAmB8D,EAAcC,QAAjCxE,OAAAC,cAAAf,GAAAI,EAAAmB,EAAAP,QAAAC,MAAAjB,GAAA,EAA0C,KAAjC0J,EAAiCtJ,EAAAG,MACtC,GAAImJ,EAAO3F,IAAMA,GAAK2F,EAAO5F,IAAMA,GAAK4F,EAAOvF,OAASf,GAAYsG,EAAOnJ,QAAUwJ,EACjF,OAAO,GAHmE,MAAA1I,GAAApB,GAAA,EAAAC,EAAAmB,EAAA,YAAArB,GAAA,MAAAuB,EAAAD,QAAAC,EAAAD,SAAA,WAAArB,EAAA,MAAAC,GAKlF,OAAO,EA8BaqK,CAAWxG,EAAGD,EAAGiG,EAAG1E,KACpBgF,GAAa,qBA7BlB,SAACtG,EAAWD,EAAWiG,EAAW1E,GAAiC,IAAA7E,GAAA,EAAAC,GAAA,EAAAC,OAAAP,EAAA,IAClF,QAAAQ,EAAAC,EAAmByE,EAAcC,QAAjCxE,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EAA0C,KAAjCkJ,EAAiC/I,EAAAJ,MACtC,GAAImJ,EAAO3F,IAAMA,GAAK2F,EAAO5F,IAAMA,GAAK4F,EAAOvF,OAASd,GAA0BqG,EAAOjD,OAAO/G,SAASqK,GACrG,OAAO,GAHmE,MAAA1I,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAI,EAAAU,QAAAV,EAAAU,SAAA,WAAAb,EAAA,MAAAC,GAKlF,OAAO,EAyBa8J,CAAWzG,EAAGD,EAAGiG,EAAG1E,KACpBgF,GAAa,qBACbP,EAAc/F,EAAGD,EAAGiG,EAAG1E,KACvBgF,GAAa,wBAGbD,EAAA,qBAAKK,IAAKV,EAAGM,UAAWA,GACnBC,EAAaP,EAAI,OAQ1C,GAAItE,EAAKtB,OAASjB,EAAY,CAE1B,IAAImH,EAAY,kBAOhB,OANIP,EAAcrE,EAAK1B,EAAG0B,EAAK3B,EAAG2B,EAAKlF,MAAO8E,KAC1CgF,GAAa,wBAEbF,IACAE,GAAa,uBAGbD,EAAA,qBAAKC,UAAWA,GACX5E,EAAKlF,OAKlB,MAAM,IAAImK,MAAM,sBCjEPC,EAAiB,SAACT,GAA8B,IAEjDzE,EAASyE,EAATzE,KACA1B,EAAS0B,EAAT1B,EAAGD,EAAM2B,EAAN3B,EACL8G,EAAWC,cAEjB,GAAIpF,EAAKtB,OAAShB,EAEd,OACIiH,EAAA,qBAAKC,UAAU,sBACV1G,MAAM,GAAGC,KAAK,GAAG7D,IAAI,SAAC8D,EAAG3C,GACtB,IAAI6I,EAAI7I,EAAI,EAOZ,OACIkJ,EAAA,qBAAKK,IAAKV,EAAGM,UAPD,uCAOuBS,QALzB,WACVF,EHoDD,SAAC7G,EAAWD,EAAWvD,GAAvB,MAAyD,CAC5E4D,KAAMf,EACNW,IACAD,IACAvD,SGxD6BwK,CAAQhH,EAAGD,EAAGiG,MAKlBA,MAQzB,GAAItE,EAAKtB,OAASjB,EAAY,CAQ1B,OACIkH,EAAA,qBAAKC,UAPO,qCAOeS,QALjB,WACVF,EHyCa,SAAC7G,EAAWD,GAAZ,MAA4C,CACjEK,KA9CsB,aA+CtBJ,IACAD,KG5CiBkH,CAAUjH,EAAGD,MAKjB2B,EAAKlF,OAKlB,MAAM,IAAImK,MAAM,sBCrDdO,EAAgB,SAACC,GAAD,OAAoCA,EAASzB,OAEtD0B,EAAQ,SAACjB,GAElB,IAAIkB,EAAQC,YAAeJ,GAEvBL,EAAWC,cAKTS,EAAyB,kBAC3BV,EJ6FqD,CACzDzG,KA1C6B,uBI/C7B,GAAIiH,EAAMpH,SAAWf,EAAY4G,MAAO,CAEpC,IAAIxE,EAAgBF,EAAciG,GAQlC,OACIhB,EAAA,yBACIA,EAAA,qBAAKC,UAAU,mBACXD,EAAA,qBAAKC,UAAU,kBACVe,EAAMlH,MAAMnE,IAAI,SAACwL,EAAKzH,GAAN,OAAYyH,EAAIxL,IAAI,SAAC0F,EAAM1B,GAAP,OACjCqG,EAAA,cAACoB,EAAD,CAAWf,IAAG,GAAApI,OAAK0B,EAAL,KAAA1B,OAAUyB,GACb2B,KAAMA,EACNJ,cAAeA,EACf8E,eAA8C,IAA9BiB,EAAM7H,cAAcO,GAAGC,UAI1DqG,EAAA,qBAAKC,UAAU,eACXD,EAAA,uCACC/E,EAAcG,SAASzF,IAAI,SAAC0L,EAASvK,GAAV,OACxBkJ,EAAA,mBAAGK,IAAKvJ,GAAIuK,OAIxBrB,EAAA,wBAAQU,QAhCQ,kBACxBF,EJsF+C,CACnDzG,KA3C0B,qBIbd,uBACC,IACDiG,EAAA,wBAAQU,QAASQ,GAAjB,oBACC,IACDlB,EAAA,wBAAQU,QA7BF,WAAM,IAAA9K,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAChB,QAAAC,EAAAmB,EAAmB8D,EAAcC,QAAjCxE,OAAAC,cAAAf,GAAAI,EAAAmB,EAAAP,QAAAC,MAAAjB,GAAA,EAA0C,KAAjC0J,EAAiCtJ,EAAAG,MACtCqK,EAASlB,IAFG,MAAArI,GAAApB,GAAA,EAAAC,EAAAmB,EAAA,YAAArB,GAAA,MAAAuB,EAAAD,QAAAC,EAAAD,SAAA,WAAArB,EAAA,MAAAC,MA6BZ,cAIP,GAAIkL,EAAMpH,SAAWf,EAAYgB,YAElC,OACImG,EAAA,yBACIA,EAAA,qBAAKC,UAAU,mBACXD,EAAA,qBAAKC,UAAU,kBACVe,EAAMlH,MAAMnE,IAAI,SAACwL,EAAKzH,GAAN,OAAYyH,EAAIxL,IAAI,SAAC0F,EAAM1B,GAAP,OACjCqG,EAAA,cAACsB,EAAD,CAAgBjB,IAAG,GAAApI,OAAK0B,EAAL,KAAA1B,OAAUyB,GAAK2B,KAAMA,SAGhD2E,EAAA,qBAAKC,UAAU,eACXD,EAAA,wCACAA,EAAA,2FAGAA,EAAA,qFAGAA,EAAA,kFAKRA,EAAA,wBAAQU,QAASQ,GAAjB,oBACC,IACDlB,EAAA,wBAAQU,QAvEQ,kBACxBF,EJwF+C,CACnDzG,KA5CyB,oBIyBb,UAKR,MAAMuG,MAAM,mBCnFdiB,SAAQC,YAAYrC,ICF1BsC,IAASC,OAAOC,EAAAC,EAAAC,cDIG,SAAC/B,GAChB,OACI6B,EAAAC,EAAAC,cAACC,EAAA,EAAaC,SAAd,CAAuB5L,MAAOoL,GAC1BI,EAAAC,EAAAC,cAAA,2BAGAF,EAAAC,EAAAC,cAAA,oJAIAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,iEACAF,EAAAC,EAAAC,cAAA,wHACAF,EAAAC,EAAAC,cAAA,sRAIJF,EAAAC,EAAAC,cAAA,sUAKAF,EAAAC,EAAAC,cAACG,EAAD,QC1BI,MAASC,SAASC,eAAe,SRmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9fb2d1ec.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nexport interface Cluster {\r\n    indices: number[];\r\n    matches: number[];\r\n    subClusters: Cluster[];\r\n}\r\n\r\nfunction distinct<T>(items: T[]): T[] {\r\n    return items.filter((elem, pos, arr) => arr.indexOf(elem) === pos);\r\n}\r\n\r\nexport function removeRange<T>(arr: T[], toRemove: T[]): T[] {\r\n    return arr.filter(item => !toRemove.includes(item));\r\n}\r\n\r\nexport function applyClusters(data: number[][], clusters: Cluster[]): number[][] {\r\n    let result: number[][] = data.map(() => []);\r\n    for (let cluster of clusters) {\r\n        for (let i of cluster.indices) {\r\n            result[i] = data[i].filter(v => cluster.matches.includes(v));\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function findBothClusterSets(data: number[][]): [Cluster[], Cluster[]] {\r\n\r\n    let indexToValue: number[] = [];\r\n    let valueToIndex: { [key: number]: number } = {};\r\n    let inverseData: number[][] = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n        let d = data[i];\r\n        for (let v of d) {\r\n\r\n            if (!(v in valueToIndex)) {\r\n                valueToIndex[v] = indexToValue.length;\r\n                indexToValue.push(v);\r\n                inverseData.push([]);\r\n            }\r\n            let index = valueToIndex[v];\r\n            inverseData[index].push(i);\r\n        }\r\n    }\r\n\r\n    const flipCluster = (cluster: Cluster): Cluster => ({\r\n        indices: cluster.matches,\r\n        matches: cluster.indices.map(index => indexToValue[index]),\r\n        subClusters: cluster.subClusters.map(flipCluster),\r\n    });\r\n\r\n    let normalClusters = findClusters(data);\r\n    let inverseClusters = findClusters(inverseData).map(flipCluster);\r\n\r\n    return [normalClusters, inverseClusters];\r\n}\r\n\r\nexport function findClusters(data: number[][]): Cluster[] {\r\n\r\n    // let clusters: Cluster[] = [];\r\n    let allIndices = data.map<[number[], number]>((v, i) => [v, i])\r\n        .filter(([v, i]) => v.length > 0)\r\n        .map(([v, i]) => i);\r\n    let allValues = distinct(data.reduce((prev, current) => [...prev, ...current], []));\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n\r\n        let d = data[i];\r\n        if (d.length === 0 || d.length === allValues.length)\r\n            continue;\r\n\r\n        let matchingSetIndices: number[] = [];\r\n        for (let j = 0; j < data.length; j++) {\r\n\r\n            if (!allIndices.includes(j))\r\n                continue;\r\n\r\n            let extraValues = removeRange(data[j], d);\r\n            if (extraValues.length === 0) {\r\n                matchingSetIndices.push(j);\r\n            }\r\n\r\n        }\r\n\r\n        if (d.length === matchingSetIndices.length) {\r\n            let leftCluster: Cluster = {\r\n                indices: matchingSetIndices,\r\n                matches: d,\r\n                subClusters: [],\r\n            };\r\n            let rightCluster: Cluster = {\r\n                indices: removeRange(allIndices, matchingSetIndices),\r\n                matches: removeRange(allValues, d),\r\n                subClusters: [],\r\n            };\r\n\r\n            if (leftCluster.indices.length > 1)\r\n                leftCluster.subClusters = findClusters(applyClusters(data, [leftCluster]));\r\n            if (rightCluster.indices.length > 1)\r\n                rightCluster.subClusters = findClusters(applyClusters(data, [rightCluster]));\r\n\r\n            return [\r\n                leftCluster,\r\n                rightCluster,\r\n            ];\r\n\r\n        }\r\n\r\n    }\r\n    return [];\r\n}","import {Action} from \"redux\";\r\nimport produce from \"immer\";\r\nimport {findBothClusterSets, removeRange} from \"../findClusters\";\r\n\r\nexport const CELL_FIXED = 'CELL_FIXED';\r\nexport interface FixedCell {\r\n    type: typeof CELL_FIXED;\r\n    value: number;\r\n}\r\n\r\nexport const CELL_FLOATING = 'CELL_FLOATING';\r\nexport interface FloatingCell {\r\n    type: typeof CELL_FLOATING;\r\n    possibleValues: number[];\r\n}\r\n\r\nexport type CellState = (FixedCell | FloatingCell) & {\r\n    x: number;\r\n    y: number;\r\n};\r\n\r\nexport interface Constraint {\r\n    cells: [number, number][];\r\n    name: string;\r\n}\r\n\r\nexport enum BoardStatus {\r\n    EnterValues,\r\n    Solve,\r\n}\r\n\r\nexport interface BoardState {\r\n    initialValues: number[][];\r\n    cells: CellState[][];\r\n    constraints: Constraint[];\r\n    status: BoardStatus;\r\n}\r\n\r\nexport const SET_CELL = 'SET_CELL';\r\nexport interface SetCellAction extends Action {\r\n    type: typeof SET_CELL;\r\n    x: number;\r\n    y: number;\r\n    value: number;\r\n}\r\n\r\nexport const CLEAR_CELL = 'CLEAR_CELL';\r\nexport interface ClearCellAction extends Action {\r\n    type: typeof CLEAR_CELL;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport const REMOVE_POSSIBLE_VALUES = 'REMOVE_POSSIBLE_VALUES';\r\nexport interface RemovePossibleValuesAction extends Action {\r\n    type: typeof REMOVE_POSSIBLE_VALUES;\r\n    x: number;\r\n    y: number;\r\n    values: number[];\r\n}\r\n\r\nexport const BEGIN_SOLVING = 'BEGIN_SOLVING';\r\nexport interface BeginSolvingAction extends Action {\r\n    type: typeof BEGIN_SOLVING;\r\n}\r\n\r\nexport const RETURN_TO_EDIT = 'RETURN_TO_EDIT';\r\nexport interface ReturnToEditAction extends Action {\r\n    type: typeof RETURN_TO_EDIT;\r\n}\r\n\r\nexport const RESET_BOARD_STATE = 'RESET_BOARD_STATE';\r\nexport interface ResetBoardStateAction extends Action {\r\n    type: typeof RESET_BOARD_STATE;\r\n}\r\n\r\nexport type BoardActions = SetCellAction\r\n    | RemovePossibleValuesAction\r\n    | ClearCellAction\r\n    | BeginSolvingAction\r\n    | ReturnToEditAction\r\n    | ResetBoardStateAction\r\n    ;\r\n\r\nexport const setCell = (x: number, y: number, value: number): SetCellAction => ({\r\n    type: SET_CELL,\r\n    x,\r\n    y,\r\n    value,\r\n});\r\n\r\nexport const clearCell = (x: number, y: number): ClearCellAction => ({\r\n    type: CLEAR_CELL,\r\n    x,\r\n    y,\r\n});\r\n\r\nexport const removePossibleValues = (x: number, y: number, values: number[]): RemovePossibleValuesAction => ({\r\n    type: REMOVE_POSSIBLE_VALUES,\r\n    x,\r\n    y,\r\n    values,\r\n});\r\n\r\nexport const beginSolving = (): BeginSolvingAction => ({\r\n    type: BEGIN_SOLVING,\r\n});\r\n\r\nexport const returnToEdit = (): ReturnToEditAction => ({\r\n    type: RETURN_TO_EDIT,\r\n});\r\n\r\nexport const resetBoardState = (): ResetBoardStateAction => ({\r\n    type: RESET_BOARD_STATE,\r\n});\r\n\r\nexport const generateEmptyBoard = (initialValues: number[][] = [], constraints: Constraint[] = []): BoardState => {\r\n\r\n    let filledInitialValues: number[][] = Array(9).fill(0).map(\r\n        (_, y) => Array(9).fill(0).map(\r\n            (_, x): number => {\r\n                if (initialValues.length > y && initialValues[y].length > x) {\r\n                    return initialValues[y][x];\r\n                }\r\n                return 0;\r\n            }\r\n        )\r\n    );\r\n\r\n    return {\r\n        status: BoardStatus.EnterValues,\r\n        initialValues: filledInitialValues,\r\n        cells: Array(9).fill(0).map(\r\n            (_, y) => Array(9).fill(0).map(\r\n                (_, x): CellState => {\r\n\r\n                    if (filledInitialValues[y][x] !== 0) {\r\n                        return {\r\n                            type: CELL_FIXED,\r\n                            x,\r\n                            y,\r\n                            value: filledInitialValues[y][x],\r\n                        }\r\n                    }\r\n\r\n                    return {\r\n                        type: CELL_FLOATING,\r\n                        x,\r\n                        y,\r\n                        possibleValues: new Array(9).fill(0).map((_, i) => i + 1)\r\n                    };\r\n                }\r\n            )\r\n        ),\r\n        constraints,\r\n    };\r\n};\r\n\r\nconst columnNames : {[key: number]: string} = {\r\n    0: 'left',\r\n    1: 'middle',\r\n    2: 'right',\r\n};\r\nconst rowNames : {[key: number]: string} = {\r\n    0: 'top',\r\n    1: 'middle',\r\n    2: 'bottom',\r\n};\r\n\r\nexport const generateDefaultConstraints = (): Constraint[] => {\r\n    let constraints: Constraint[] = [];\r\n    for (let x = 0; x < 9; x++) {\r\n        constraints.push({\r\n            cells: Array(9).fill(0).map((_, y) => [x, y]),\r\n            name: `column ${x+1}`,\r\n        });\r\n    }\r\n    for (let y = 0; y < 9; y++) {\r\n        constraints.push({\r\n            cells: Array(9).fill(0).map((_, x) => [x, y]),\r\n            name: `row ${y+1}`,\r\n        });\r\n    }\r\n    for (let ax = 0; ax < 3; ax++) {\r\n        for (let ay = 0; ay < 3; ay++) {\r\n            let cellCoords: [number, number][] = [];\r\n            for (let cx = 0; cx < 3; cx++) {\r\n                for (let cy = 0; cy < 3; cy++) {\r\n                    cellCoords.push([ax * 3 + cx, ay * 3 + cy]);\r\n                }\r\n            }\r\n            constraints.push({\r\n                cells: cellCoords,\r\n                name: 'the ' + ((ax === 1 && ay === 1) ? 'central' : `${rowNames[ay]}-${columnNames[ax]}`) + ' square',\r\n            });\r\n        }\r\n    }\r\n    return constraints;\r\n};\r\n\r\n\r\nconst initialBoardState: BoardState = generateEmptyBoard(\r\n    // [\r\n    //     [ 0, 0, 0, 2, 0, 0, 0, 1, 3 ],\r\n    //     [ 0, 0, 2, 0, 5, 9, 6, 0, 0 ],\r\n    //     [ 0, 9, 0, 0, 0, 0, 0, 0, 0 ],\r\n    //     [ 6, 0, 0, 0, 0, 0, 0, 7, 0 ],\r\n    //     [ 7, 0, 0, 0, 8, 0, 1, 0, 0 ],\r\n    //     [ 0, 1, 0, 0, 4, 0, 0, 0, 0 ],\r\n    //     [ 0, 0, 6, 0, 0, 8, 0, 4, 5 ],\r\n    //     [ 8, 0, 0, 0, 0, 0, 0, 2, 0 ],\r\n    //     [ 0, 0, 3, 0, 0, 2, 0, 0, 0 ],\r\n    // ],\r\n    // [\r\n    //     [ 8, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n    //     [ 0, 0, 3, 6, 0, 0, 0, 0, 0 ],\r\n    //     [ 0, 7, 0, 0, 9, 0, 2, 0, 0 ],\r\n    //     [ 0, 5, 0, 0, 0, 7, 0, 0, 0 ],\r\n    //     [ 0, 0, 0, 0, 4, 5, 7, 0, 0 ],\r\n    //     [ 0, 0, 0, 1, 0, 0, 0, 3, 0 ],\r\n    //     [ 0, 0, 1, 0, 0, 0, 0, 6, 8 ],\r\n    //     [ 0, 0, 8, 5, 0, 0, 0, 1, 0 ],\r\n    //     [ 0, 9, 0, 0, 0, 0, 4, 0, 0 ],\r\n    // ],\r\n    [\r\n        [ 4, 0, 5, 0, 2, 0, 0, 0, 0 ],\r\n        [ 0, 0, 0, 7, 5, 0, 0, 0, 0 ],\r\n        [ 0, 0, 0, 0, 0, 0, 4, 0, 3 ],\r\n        [ 0, 2, 0, 0, 0, 8, 0, 0, 6 ],\r\n        [ 0, 0, 0, 0, 0, 0, 7, 0, 1 ],\r\n        [ 0, 8, 0, 0, 9, 0, 0, 0, 0 ],\r\n        [ 0, 0, 3, 2, 7, 0, 0, 0, 0 ],\r\n        [ 0, 0, 1, 0, 0, 0, 6, 9, 0 ],\r\n        [ 0, 0, 7, 6, 0, 0, 0, 1, 0 ],\r\n    ],\r\n    generateDefaultConstraints()\r\n);\r\nexport const boardReducer = (boardState: BoardState = initialBoardState, action: BoardActions): BoardState =>\r\n    produce(boardState, draft => {\r\n\r\n        if (action.type === SET_CELL) {\r\n            draft.cells[action.y][action.x] = {\r\n                type: CELL_FIXED,\r\n                x: action.x,\r\n                y: action.y,\r\n                value: action.value,\r\n            };\r\n\r\n            if (draft.status === BoardStatus.EnterValues) {\r\n                draft.initialValues[action.y][action.x] = action.value;\r\n            }\r\n        }\r\n\r\n        if (action.type === REMOVE_POSSIBLE_VALUES) {\r\n            let cell = draft.cells[action.y][action.x];\r\n            if (cell.type === CELL_FLOATING) {\r\n                cell.possibleValues = cell.possibleValues.filter(v => !action.values.includes(v));\r\n            }\r\n        }\r\n\r\n        if (action.type === CLEAR_CELL) {\r\n            draft.cells[action.y][action.x] = {\r\n                type: CELL_FLOATING,\r\n                x: action.x,\r\n                y: action.y,\r\n                possibleValues: Array(9).fill(0).map((_, i) => i+1),\r\n            };\r\n\r\n            if (draft.status === BoardStatus.EnterValues) {\r\n                draft.initialValues[action.y][action.x] = 0;\r\n            }\r\n        }\r\n\r\n        if (action.type === BEGIN_SOLVING) {\r\n            draft.status = BoardStatus.Solve;\r\n        }\r\n\r\n        if (action.type === RETURN_TO_EDIT) {\r\n            draft.status = BoardStatus.EnterValues;\r\n            for (let x = 0; x < 9; x++) {\r\n                for (let y = 0; y < 9; y++) {\r\n                    if (draft.initialValues[y][x] !== 0) {\r\n                        draft.cells[y][x] = {\r\n                            type: CELL_FIXED,\r\n                            x,\r\n                            y,\r\n                            value: draft.initialValues[y][x],\r\n                        };\r\n                    }\r\n                    else {\r\n                        draft.cells[y][x] = {\r\n                            type: CELL_FLOATING,\r\n                            x,\r\n                            y,\r\n                            possibleValues: Array(9).fill(0).map((_, i) => i+1),\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (action.type === RESET_BOARD_STATE) {\r\n            return generateEmptyBoard([], generateDefaultConstraints());\r\n        }\r\n\r\n    });\r\n\r\nexport interface NextActionSet {\r\n    actions: (SetCellAction | RemovePossibleValuesAction)[];\r\n    causes: [number, number, number[]][];\r\n    messages: string[];\r\n}\r\n\r\nexport function getNextAction(boardState: BoardState): NextActionSet {\r\n\r\n    let nextActionSet: NextActionSet = {\r\n        actions: [],\r\n        causes: [],\r\n        messages: [],\r\n    };\r\n\r\n    for (let x = 0; x < 9; x++) {\r\n        for (let y = 0; y < 9; y++) {\r\n            let cell = boardState.cells[y][x];\r\n            if (cell.type === CELL_FLOATING && cell.possibleValues.length === 1) {\r\n                nextActionSet.actions.push({\r\n                    type: SET_CELL,\r\n                    x,\r\n                    y,\r\n                    value: cell.possibleValues[0],\r\n                })\r\n            }\r\n        }\r\n    }\r\n    if (nextActionSet.actions.length > 0) {\r\n        nextActionSet.messages.push('The cell(s) can only be one possible value.');\r\n        return nextActionSet;\r\n    }\r\n\r\n    for (let constraint of boardState.constraints) {\r\n\r\n        for (let [x, y] of constraint.cells) {\r\n            let cell = boardState.cells[y][x];\r\n            if (cell.type === CELL_FIXED)\r\n                continue;\r\n\r\n            for (let [x2, y2] of constraint.cells) {\r\n                let cell2 = boardState.cells[y2][x2];\r\n                if (cell2.type === CELL_FIXED && cell.possibleValues.includes(cell2.value)) {\r\n                    nextActionSet.actions.push({\r\n                        type: REMOVE_POSSIBLE_VALUES,\r\n                        x,\r\n                        y,\r\n                        values: [cell2.value],\r\n                    });\r\n                    if (!nextActionSet.causes.some(([cx, cy]) => cx === x2 && cy === y2)) {\r\n                        nextActionSet.causes.push([x2, y2, []]);\r\n                    }\r\n                    let cause = nextActionSet.causes.find(([cx, cy]) => cx === x2 && cy === y2);\r\n                    if (cause)\r\n                        cause[2].push(cell2.value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (nextActionSet.actions.length > 0) {\r\n        nextActionSet.messages.push('The values already exist in the highlighted cells.');\r\n        return nextActionSet;\r\n    }\r\n\r\n    let messages: string[] = [];\r\n    for (let constraint of boardState.constraints) {\r\n\r\n        let indexToCoords: [number, number][] = [];\r\n        let data: number[][] = [];\r\n\r\n        for (let [x, y] of constraint.cells) {\r\n            let cell = boardState.cells[y][x];\r\n            if (cell.type === CELL_FIXED)\r\n                continue;\r\n\r\n            indexToCoords.push([x, y]);\r\n            data.push(cell.possibleValues);\r\n        }\r\n\r\n        let clusterList = findBothClusterSets(data);\r\n        for (let clusters of clusterList) {\r\n\r\n            let clusterMessages = [];\r\n            let useClusterMessages = false;\r\n            for (let cluster of clusters) {\r\n                clusterMessages.push(`values ${[ ...cluster.matches].sort().join(', ')} are in cells `+\r\n                    `${cluster.indices.map(i => `(${indexToCoords[i][0]},${indexToCoords[i][1]})`).join(', ')}`);\r\n                for (let i of cluster.indices) {\r\n                    let extraValues = removeRange(data[i], cluster.matches);\r\n                    if (extraValues.length > 0) {\r\n                        useClusterMessages = true;\r\n                        nextActionSet.actions.push({\r\n                            type: REMOVE_POSSIBLE_VALUES,\r\n                            x: indexToCoords[i][0],\r\n                            y: indexToCoords[i][1],\r\n                            values: extraValues,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (useClusterMessages) {\r\n                clusterMessages[clusterMessages.length - 1] = 'and ' + clusterMessages[clusterMessages.length - 1];\r\n                messages.push(`We can build ${clusterMessages.length} clusters, such that ${clusterMessages.join(', ')}`);\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (nextActionSet.actions.length > 0) {\r\n            nextActionSet.messages = [\r\n                `Consider ${constraint.name}.`,\r\n                ...messages,\r\n                'After building these clusters, we can remove some possible values from the cells.',\r\n            ];\r\n            return nextActionSet;\r\n        }\r\n    }\r\n\r\n    nextActionSet.messages.push('The board is complete.');\r\n    return nextActionSet;\r\n\r\n}","import {combineReducers} from \"redux\";\r\nimport {boardReducer} from \"./board\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    board: boardReducer,\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;","import {\r\n    CELL_FIXED,\r\n    CELL_FLOATING,\r\n    CellState, NextActionSet, REMOVE_POSSIBLE_VALUES,\r\n    SET_CELL\r\n} from \"../state/board\";\r\nimport * as React from \"react\";\r\n\r\nexport interface SolveCellProps {\r\n    cell: CellState;\r\n    nextActionSet: NextActionSet;\r\n    isInitialValue: boolean;\r\n}\r\n\r\nconst willSelect = (x: number, y: number, n: number, nextActionSet: NextActionSet) => {\r\n    for (let action of nextActionSet.actions) {\r\n        if (action.x === x && action.y === y && action.type === SET_CELL && action.value === n)\r\n            return true;\r\n    }\r\n    return false;\r\n};\r\nconst willRemove = (x: number, y: number, n: number, nextActionSet: NextActionSet) => {\r\n    for (let action of nextActionSet.actions) {\r\n        if (action.x === x && action.y === y && action.type === REMOVE_POSSIBLE_VALUES && action.values.includes(n))\r\n            return true;\r\n    }\r\n    return false;\r\n};\r\nconst willHighlight = (x: number, y: number, n: number, nextActionSet: NextActionSet) => {\r\n    for (let [cx, cy, cvalues] of nextActionSet.causes) {\r\n        if (cx === x && cy === y && cvalues.includes(n))\r\n            return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const SolveCell = (props: SolveCellProps) => {\r\n\r\n    const { cell, nextActionSet, isInitialValue } = props;\r\n    const { x, y } = cell;\r\n\r\n    if (cell.type === CELL_FLOATING) {\r\n        return (\r\n            <div className=\"cell cell-floating\">\r\n                {Array(9).fill(0).map((_, i) => {\r\n                    let n = i + 1;\r\n                    let isPossible = cell.possibleValues.includes(n);\r\n                    let className = \"floating-number\";\r\n\r\n                    if (willSelect(x, y, n, nextActionSet))\r\n                        className += \" mark-will-select\";\r\n                    if (willRemove(x, y, n, nextActionSet))\r\n                        className += \" mark-will-remove\";\r\n                    if (willHighlight(x, y, n, nextActionSet))\r\n                        className += \" mark-will-highlight\";\r\n\r\n                    return (\r\n                        <div key={n} className={className}>\r\n                            {isPossible ? n : ''}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (cell.type === CELL_FIXED) {\r\n\r\n        let className = \"cell cell-fixed\";\r\n        if (willHighlight(cell.x, cell.y, cell.value, nextActionSet))\r\n            className += \" mark-will-highlight\";\r\n\r\n        if (isInitialValue)\r\n            className += \" mark-initial-value\";\r\n\r\n        return (\r\n            <div className={className}>\r\n                {cell.value}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    throw new Error('unknown cell type');\r\n};","import {\r\n    beginSolving,\r\n    CELL_FIXED,\r\n    CELL_FLOATING,\r\n    CellState,\r\n    clearCell,\r\n    NextActionSet,\r\n    resetBoardState,\r\n    setCell\r\n} from \"../state/board\";\r\nimport * as React from \"react\";\r\nimport {useDispatch} from \"redux-react-hook\";\r\n\r\nexport interface EnterValueCellProps {\r\n    cell: CellState;\r\n}\r\n\r\nexport const EnterValueCell = (props:EnterValueCellProps) => {\r\n\r\n    const { cell } = props;\r\n    const { x, y } = cell;\r\n    const dispatch = useDispatch();\r\n\r\n    if (cell.type === CELL_FLOATING) {\r\n\r\n        return (\r\n            <div className=\"cell cell-floating\">\r\n                {Array(9).fill(0).map((_, i) => {\r\n                    let n = i + 1;\r\n                    let className = \"floating-number hide-unless-hovering\";\r\n\r\n                    let onClick = () => {\r\n                        dispatch(setCell(x, y, n));\r\n                    };\r\n\r\n                    return (\r\n                        <div key={n} className={className} onClick={onClick}>\r\n                            {n}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (cell.type === CELL_FIXED) {\r\n\r\n        let className = \"cell cell-fixed mark-initial-value\";\r\n\r\n        let onClick = () => {\r\n            dispatch(clearCell(x, y));\r\n        };\r\n\r\n        return (\r\n            <div className={className} onClick={onClick}>\r\n                {cell.value}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    throw new Error('unknown cell type');\r\n};","import * as React from \"react\";\r\nimport {useDispatch, useMappedState} from \"redux-react-hook\";\r\nimport {beginSolving, BoardState, BoardStatus, getNextAction, resetBoardState, returnToEdit} from \"../state/board\";\r\nimport {AppState} from \"../state/root\";\r\nimport {SolveCell} from \"./SolveCell\";\r\nimport {EnterValueCell} from \"./EnterValueCell\";\r\n\r\nconst getBoardState = (appState: AppState): BoardState => appState.board;\r\n\r\nexport const Board = (props: {}) => {\r\n\r\n    let state = useMappedState(getBoardState);\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    const beginSolvingOnClick = () =>\r\n        dispatch(beginSolving());\r\n\r\n    const resetBoardStateOnClick = () =>\r\n        dispatch(resetBoardState());\r\n\r\n    const returnToEditOnClick = () =>\r\n        dispatch(returnToEdit());\r\n\r\n    if (state.status === BoardStatus.Solve) {\r\n\r\n        let nextActionSet = getNextAction(state);\r\n\r\n        let onClick = () => {\r\n            for (let action of nextActionSet.actions) {\r\n                dispatch(action);\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"board-container\">\r\n                    <div className=\"cell-container\">\r\n                        {state.cells.map((row, y) => row.map((cell, x) => (\r\n                            <SolveCell key={`${x},${y}`}\r\n                                       cell={cell}\r\n                                       nextActionSet={nextActionSet}\r\n                                       isInitialValue={state.initialValues[y][x] !== 0}\r\n                            />\r\n                        )))}\r\n                    </div>\r\n                    <div className=\"explanation\">\r\n                        <h2>Explanation</h2>\r\n                        {nextActionSet.messages.map((message, i) =>\r\n                            <p key={i}>{message}</p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <button onClick={returnToEditOnClick}>Return to Edit Mode</button>\r\n                {' '}\r\n                <button onClick={resetBoardStateOnClick}>Reset Everything</button>\r\n                {' '}\r\n                <button onClick={onClick}>Next Step</button>\r\n            </div>\r\n        );\r\n    }\r\n    else if (state.status === BoardStatus.EnterValues) {\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"board-container\">\r\n                    <div className=\"cell-container\">\r\n                        {state.cells.map((row, y) => row.map((cell, x) => (\r\n                            <EnterValueCell key={`${x},${y}`} cell={cell} />\r\n                        )))}\r\n                    </div>\r\n                    <div className=\"explanation\">\r\n                        <h2>Instructions</h2>\r\n                        <p>\r\n                            Click on the small number boxes to set cells to specific values.\r\n                        </p>\r\n                        <p>\r\n                            Click on the large number boxes to clear an existing cell.\r\n                        </p>\r\n                        <p>\r\n                            When you are ready to solve your sudoku, press Start.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <button onClick={resetBoardStateOnClick}>Reset Everything</button>\r\n                {' '}\r\n                <button onClick={beginSolvingOnClick}>Start</button>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        throw Error('unknown status');\r\n    }\r\n\r\n};","import React  from 'react';\nimport {createStore} from \"redux\";\nimport {rootReducer} from \"./state/root\";\nimport {Board} from \"./components/Board\";\nimport {StoreContext} from 'redux-react-hook';\n\nimport './App.css';\n\nconst store = createStore(rootReducer);\n\nexport const App = (props: {}) => {\n    return (\n        <StoreContext.Provider value={store}>\n            <h1>\n                Sudoku Solver\n            </h1>\n            <p>\n                This solver is not a very robust sudoku solver. Instead, it aims to see how many puzzles can be\n                solved by using only these three rules:\n            </p>\n            <ol>\n                <li>If a cell has only one possible value, choose that.</li>\n                <li>If a value exists in the same row, column, or square as a cell, remove that value from the candidate list.</li>\n                <li>Create clusters of numbers in a row, column, or square. A cluster is defined as a set of N numbers that\n                    exists in only N cells in the same region. For more details, try having the solver walk through the default\n                    puzzle, and you will be able to see a few examples.</li>\n            </ol>\n            <p>\n                If given an invalid puzzle, this solver may leave cells blank or fill in values in invalid places. I have not added in any\n                checks for that. If given an unsolvable puzzle, or one that is too difficult for this solver, it will state that\n                the puzzle is complete, but still leave the remaining candidates in the grid.\n            </p>\n            <Board />\n        </StoreContext.Provider>\n    )\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {App} from \"./App\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}